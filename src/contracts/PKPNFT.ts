/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PKPNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "burn"
      | "exists"
      | "freeMintGrantAndBurnNext"
      | "freeMintNext"
      | "freeMintSigTest"
      | "freeMintSigner"
      | "getApproved"
      | "getEthAddress"
      | "getPubkey"
      | "getUnmintedRoutedTokenIdCount"
      | "isApprovedForAll"
      | "mintCost"
      | "mintGrantAndBurnNext"
      | "mintGrantAndBurnSpecific"
      | "mintNext"
      | "mintSpecific"
      | "name"
      | "owner"
      | "ownerOf"
      | "pkpNftMetadata"
      | "pkpPermissions"
      | "pkpRouted"
      | "prefixed"
      | "redeemedFreeMintIds"
      | "renounceOwnership"
      | "router"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setFreeMintSigner"
      | "setMintCost"
      | "setPkpNftMetadataAddress"
      | "setPkpPermissionsAddress"
      | "setRouterAddress"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "unmintedRoutedTokenIds"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "FreeMintSignerSet"
      | "MintCostSet"
      | "OwnershipTransferred"
      | "PKPMinted"
      | "PkpNftMetadataAddressSet"
      | "PkpPermissionsAddressSet"
      | "PkpRouted"
      | "RouterAddressSet"
      | "Transfer"
      | "Withdrew"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintGrantAndBurnNext",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintNext",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintSigTest",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPubkey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnmintedRoutedTokenIdCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mintCost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintGrantAndBurnNext",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintGrantAndBurnSpecific",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNext",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSpecific",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pkpNftMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pkpPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pkpRouted",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prefixed", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "redeemedFreeMintIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeMintSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPkpNftMetadataAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPkpPermissionsAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unmintedRoutedTokenIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeMintGrantAndBurnNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeMintNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeMintSigTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeMintSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPubkey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnmintedRoutedTokenIdCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintGrantAndBurnNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintGrantAndBurnSpecific",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSpecific",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pkpNftMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pkpPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pkpRouted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prefixed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemedFreeMintIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeMintSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPkpNftMetadataAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPkpPermissionsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unmintedRoutedTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FreeMintSignerSetEvent {
  export type InputTuple = [newFreeMintSigner: AddressLike];
  export type OutputTuple = [newFreeMintSigner: string];
  export interface OutputObject {
    newFreeMintSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintCostSetEvent {
  export type InputTuple = [newMintCost: BigNumberish];
  export type OutputTuple = [newMintCost: bigint];
  export interface OutputObject {
    newMintCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PKPMintedEvent {
  export type InputTuple = [tokenId: BigNumberish, pubkey: BytesLike];
  export type OutputTuple = [tokenId: bigint, pubkey: string];
  export interface OutputObject {
    tokenId: bigint;
    pubkey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PkpNftMetadataAddressSetEvent {
  export type InputTuple = [pkpNftMetadataAddress: AddressLike];
  export type OutputTuple = [pkpNftMetadataAddress: string];
  export interface OutputObject {
    pkpNftMetadataAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PkpPermissionsAddressSetEvent {
  export type InputTuple = [pkpPermissionsAddress: AddressLike];
  export type OutputTuple = [pkpPermissionsAddress: string];
  export interface OutputObject {
    pkpPermissionsAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PkpRoutedEvent {
  export type InputTuple = [tokenId: BigNumberish, keyType: BigNumberish];
  export type OutputTuple = [tokenId: bigint, keyType: bigint];
  export interface OutputObject {
    tokenId: bigint;
    keyType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterAddressSetEvent {
  export type InputTuple = [routerAddress: AddressLike];
  export type OutputTuple = [routerAddress: string];
  export interface OutputObject {
    routerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrewEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PKPNFT extends BaseContract {
  connect(runner?: ContractRunner | null): PKPNFT;
  waitForDeployment(): Promise<this>;

  interface: PKPNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  exists: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  freeMintGrantAndBurnNext: TypedContractMethod<
    [
      keyType: BigNumberish,
      freeMintId: BigNumberish,
      ipfsCID: BytesLike,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  freeMintNext: TypedContractMethod<
    [
      keyType: BigNumberish,
      freeMintId: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  freeMintSigTest: TypedContractMethod<
    [
      freeMintId: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "view"
  >;

  freeMintSigner: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getEthAddress: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getPubkey: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getUnmintedRoutedTokenIdCount: TypedContractMethod<
    [keyType: BigNumberish],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mintCost: TypedContractMethod<[], [bigint], "view">;

  mintGrantAndBurnNext: TypedContractMethod<
    [keyType: BigNumberish, ipfsCID: BytesLike],
    [bigint],
    "payable"
  >;

  mintGrantAndBurnSpecific: TypedContractMethod<
    [tokenId: BigNumberish, ipfsCID: BytesLike],
    [void],
    "nonpayable"
  >;

  mintNext: TypedContractMethod<[keyType: BigNumberish], [bigint], "payable">;

  mintSpecific: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pkpNftMetadata: TypedContractMethod<[], [string], "view">;

  pkpPermissions: TypedContractMethod<[], [string], "view">;

  pkpRouted: TypedContractMethod<
    [tokenId: BigNumberish, keyType: BigNumberish],
    [void],
    "nonpayable"
  >;

  prefixed: TypedContractMethod<[hash: BytesLike], [string], "view">;

  redeemedFreeMintIds: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setFreeMintSigner: TypedContractMethod<
    [newFreeMintSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  setMintCost: TypedContractMethod<
    [newMintCost: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPkpNftMetadataAddress: TypedContractMethod<
    [pkpNftMetadataAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setPkpPermissionsAddress: TypedContractMethod<
    [pkpPermissionsAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setRouterAddress: TypedContractMethod<
    [routerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unmintedRoutedTokenIds: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "freeMintGrantAndBurnNext"
  ): TypedContractMethod<
    [
      keyType: BigNumberish,
      freeMintId: BigNumberish,
      ipfsCID: BytesLike,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freeMintNext"
  ): TypedContractMethod<
    [
      keyType: BigNumberish,
      freeMintId: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freeMintSigTest"
  ): TypedContractMethod<
    [
      freeMintId: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "freeMintSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEthAddress"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPubkey"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getUnmintedRoutedTokenIdCount"
  ): TypedContractMethod<[keyType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintGrantAndBurnNext"
  ): TypedContractMethod<
    [keyType: BigNumberish, ipfsCID: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintGrantAndBurnSpecific"
  ): TypedContractMethod<
    [tokenId: BigNumberish, ipfsCID: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintNext"
  ): TypedContractMethod<[keyType: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "mintSpecific"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pkpNftMetadata"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pkpPermissions"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pkpRouted"
  ): TypedContractMethod<
    [tokenId: BigNumberish, keyType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prefixed"
  ): TypedContractMethod<[hash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "redeemedFreeMintIds"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFreeMintSigner"
  ): TypedContractMethod<
    [newFreeMintSigner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintCost"
  ): TypedContractMethod<[newMintCost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPkpNftMetadataAddress"
  ): TypedContractMethod<
    [pkpNftMetadataAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPkpPermissionsAddress"
  ): TypedContractMethod<
    [pkpPermissionsAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRouterAddress"
  ): TypedContractMethod<[routerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unmintedRoutedTokenIds"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "FreeMintSignerSet"
  ): TypedContractEvent<
    FreeMintSignerSetEvent.InputTuple,
    FreeMintSignerSetEvent.OutputTuple,
    FreeMintSignerSetEvent.OutputObject
  >;
  getEvent(
    key: "MintCostSet"
  ): TypedContractEvent<
    MintCostSetEvent.InputTuple,
    MintCostSetEvent.OutputTuple,
    MintCostSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PKPMinted"
  ): TypedContractEvent<
    PKPMintedEvent.InputTuple,
    PKPMintedEvent.OutputTuple,
    PKPMintedEvent.OutputObject
  >;
  getEvent(
    key: "PkpNftMetadataAddressSet"
  ): TypedContractEvent<
    PkpNftMetadataAddressSetEvent.InputTuple,
    PkpNftMetadataAddressSetEvent.OutputTuple,
    PkpNftMetadataAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "PkpPermissionsAddressSet"
  ): TypedContractEvent<
    PkpPermissionsAddressSetEvent.InputTuple,
    PkpPermissionsAddressSetEvent.OutputTuple,
    PkpPermissionsAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "PkpRouted"
  ): TypedContractEvent<
    PkpRoutedEvent.InputTuple,
    PkpRoutedEvent.OutputTuple,
    PkpRoutedEvent.OutputObject
  >;
  getEvent(
    key: "RouterAddressSet"
  ): TypedContractEvent<
    RouterAddressSetEvent.InputTuple,
    RouterAddressSetEvent.OutputTuple,
    RouterAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdrew"
  ): TypedContractEvent<
    WithdrewEvent.InputTuple,
    WithdrewEvent.OutputTuple,
    WithdrewEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "FreeMintSignerSet(address)": TypedContractEvent<
      FreeMintSignerSetEvent.InputTuple,
      FreeMintSignerSetEvent.OutputTuple,
      FreeMintSignerSetEvent.OutputObject
    >;
    FreeMintSignerSet: TypedContractEvent<
      FreeMintSignerSetEvent.InputTuple,
      FreeMintSignerSetEvent.OutputTuple,
      FreeMintSignerSetEvent.OutputObject
    >;

    "MintCostSet(uint256)": TypedContractEvent<
      MintCostSetEvent.InputTuple,
      MintCostSetEvent.OutputTuple,
      MintCostSetEvent.OutputObject
    >;
    MintCostSet: TypedContractEvent<
      MintCostSetEvent.InputTuple,
      MintCostSetEvent.OutputTuple,
      MintCostSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PKPMinted(uint256,bytes)": TypedContractEvent<
      PKPMintedEvent.InputTuple,
      PKPMintedEvent.OutputTuple,
      PKPMintedEvent.OutputObject
    >;
    PKPMinted: TypedContractEvent<
      PKPMintedEvent.InputTuple,
      PKPMintedEvent.OutputTuple,
      PKPMintedEvent.OutputObject
    >;

    "PkpNftMetadataAddressSet(address)": TypedContractEvent<
      PkpNftMetadataAddressSetEvent.InputTuple,
      PkpNftMetadataAddressSetEvent.OutputTuple,
      PkpNftMetadataAddressSetEvent.OutputObject
    >;
    PkpNftMetadataAddressSet: TypedContractEvent<
      PkpNftMetadataAddressSetEvent.InputTuple,
      PkpNftMetadataAddressSetEvent.OutputTuple,
      PkpNftMetadataAddressSetEvent.OutputObject
    >;

    "PkpPermissionsAddressSet(address)": TypedContractEvent<
      PkpPermissionsAddressSetEvent.InputTuple,
      PkpPermissionsAddressSetEvent.OutputTuple,
      PkpPermissionsAddressSetEvent.OutputObject
    >;
    PkpPermissionsAddressSet: TypedContractEvent<
      PkpPermissionsAddressSetEvent.InputTuple,
      PkpPermissionsAddressSetEvent.OutputTuple,
      PkpPermissionsAddressSetEvent.OutputObject
    >;

    "PkpRouted(uint256,uint256)": TypedContractEvent<
      PkpRoutedEvent.InputTuple,
      PkpRoutedEvent.OutputTuple,
      PkpRoutedEvent.OutputObject
    >;
    PkpRouted: TypedContractEvent<
      PkpRoutedEvent.InputTuple,
      PkpRoutedEvent.OutputTuple,
      PkpRoutedEvent.OutputObject
    >;

    "RouterAddressSet(address)": TypedContractEvent<
      RouterAddressSetEvent.InputTuple,
      RouterAddressSetEvent.OutputTuple,
      RouterAddressSetEvent.OutputObject
    >;
    RouterAddressSet: TypedContractEvent<
      RouterAddressSetEvent.InputTuple,
      RouterAddressSetEvent.OutputTuple,
      RouterAddressSetEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdrew(uint256)": TypedContractEvent<
      WithdrewEvent.InputTuple,
      WithdrewEvent.OutputTuple,
      WithdrewEvent.OutputObject
    >;
    Withdrew: TypedContractEvent<
      WithdrewEvent.InputTuple,
      WithdrewEvent.OutputTuple,
      WithdrewEvent.OutputObject
    >;
  };
}
